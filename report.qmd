---
format: html
editor: visual
bibliography: references.bib
---

```{r, eval = T}
# This code chunk contains code to install all of the dependencies
# necessary to compile and run your report, using if-statements to
# reduce install time for unnecessary code.
# It should be set to eval = F by default, so you aren't installing
# software on someone's computer without their consent.

# This works for packages that are on CRAN
if (!"tidyverse" %in% installed.packages()) {
  install.packages("tidyverse")
}
if (!"skimr" %in% installed.packages()) {
  install.packages("skimr")
}
if (!"cowplot" %in% installed.packages()) {
  install.packages("cowplot")
}

library(dplyr) #tidyverse
library(tidyr) #tidyverse
library(ggplot2) #tidyverse
library(stringr) #tidyverse
library(forcats) #tidyverse
library(skimr)
library(cowplot)
```

```{R echo=FALSE}
options(readr.show_col_types = FALSE)

olympics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-27/olympics.csv')
```

## Introduction

The Olympic Games is an international sports event that has been an icon through the ages. The games represent the best of the best in their given sports and are held every four years in front of a worldwide audience. However, the Olympics can sometimes feel out of touch to average athletic people. As a result, it was our goal to look at the games from a global perspective all the way down to a personal family level.

We obtained this data from a Tidy Tuesday dataset and it was originally scraped from www.sports-reference.com. The data set contains data from the Olympics from 1896 to 2016. Each athlete's name is listed and they have been assigned an individual ID. Physical characteristics are comprised of their sex, age, height, and weight. Team and National Olympic Committee Region (NOC) are used to denote which region the athlete represents. {ADDISON- WAS THERE SOMETHING WEIRD ABOUT THIS?}. The dataset also contained information about the Olympic Games the athlete competed in, including the year, the season (summer or winter), and the city the games were held in. The sport and event were also included and, of course, which medal the athlete won (if any). No event specific information was included (i.e. time or score).

Given this broad dataset and our goal to make the Olympic games to feel closer to home, our objectives were to 1) Evaluate the influence of historical events on the participation level of the games for both males and females, 2) Explore how participation in track events has changed over time, 3) Determine if the presence of a nickname influences a persons likelihood to medal, and 4) See how family physical characteristics stack up with Olympic medalists through the ages.

> Introduce your dataset and basic questions for exploration. Explain any unique approaches you will take or any interesting features of your dataset that you have to overcome. Cite the source of your dataset, and briefly discuss how it was collected.
>
> Discuss the variables in the dataset and if there are anomalies in the variables, provide some visual assessment of the anomalies and explain how they may have arisen. You should cover most of the information in your proposal data section, but should primarily use paragraphs and not lists/tables (the exception may be a list of e.g. items which were measured).

## Methods

Below is the code for data wrangling for conflict analysis

```{r, echo = FALSE}
# create data set that sums the countries by year.This only works for the years up until 1992 where games were held in the same year. 
countries <- olympics %>%
  group_by(noc,year,sex) %>%
  summarise(participantnum = n(), .groups = "drop")
```

Below is the code for data wrangling for track events over time

```{r, echo = FALSE}
#Get track and field events
t_f <- olympics %>% filter(sport == "Athletics")
#unique(t_f$event) #need to remove vaults, throws, puts, and athalons
track <- t_f %>% filter(!str_detect(event, "Walk|Jump|Put|Throw|Vault|Decathlon|Pentathlon|Heptathlon"))
track <- track %>% filter(!str_detect(event, "Around|Team")) #remove team events, and all-around champ
#unique(track$event)

#Add sub-categories, 60m - 400m sprint, 800m-3000m middle, 5000m-10000m + 5mile + marathon long
track$category <- NA
track$distance <- NA
for (i in 1:nrow(track)) {
  if(str_detect(track$event[i], "Relay")) {
    track$category[i] <- "relay"
  }
  if(str_detect(track$event[i], "Hurdle|Steeplechase")) {
    track$category[i] <- "hurdles"
  }
  if(str_detect(track$event[i], "Marathon|mile|Cross")) {
    track$category[i] <- "long"
  }
  else{
    distance <- str_extract(track$event[i], "\\d+(,\\d{3})*") #regex bad for relay but already categorized above
    track$distance[i] <- as.numeric(gsub(",", "", distance))
    if (is.na(track$category[i]) && !is.na(track$distance[i]) && track$distance[i] <= 400) {
      track$category[i] <- "sprint"
    }
    if (is.na(track$category[i]) && !is.na(track$distance[i]) && track$distance[i] > 400 && track$distance[i] <= 3000) {
      track$category[i] <- "middle"
    }
    if (is.na(track$category[i]) && !is.na(track$distance[i]) && track$distance[i] > 3000 && track$distance[i] <= 10000) {
      track$category[i] <- "long"
    }
  }
}

#skimr::skim(track)
```

Below is the code for data wrangling for nickname analysis

```{r, echo = FALSE}
olympics_nicknames <- olympics %>% mutate(nickname = as.integer(str_count(name, '"') == 2 | str_count(name, "'") == 2))
olympics_nicknames$nickname <- as.factor(olympics_nicknames$nickname)

olympics_nicknames %>% group_by(nickname) %>% summarize(count = n(), percent = n()/nrow(olympics_nicknames))

nickname <- olympics_nicknames %>% filter(nickname == 1) %>% group_by(medal) %>% summarize(count = n())
no_nickname <- olympics_nicknames %>% filter(nickname == 0) %>% group_by(medal) %>% summarize(count = n())

medalcount_nickname <- olympics_nicknames %>% filter(nickname == 1) %>% group_by(name) %>% summarize(Gold = sum(medal == "Gold"), Silver = sum(medal == "Silver"), Bronze = (sum(medal == "Bronze")), None = sum(is.na(medal)))

medalcount_no_nickname <- olympics_nicknames %>% filter(nickname == 0) %>% group_by(name) %>% summarize(Gold = sum(medal == "Gold"), Silver = sum(medal == "Silver"), Bronze = (sum(medal == "Bronze")), None = sum(is.na(medal)))

medalcount_nickname$nickname <- 1
medalcount_no_nickname$nickname <- 0

MergeMedalCount <- rbind(medalcount_nickname, medalcount_no_nickname)

MergeMedalCount_long_noNA <- MergeMedalCount %>% pivot_longer(cols = `Gold`:`None`, names_to = "Medal", values_to = "Count") %>% filter(!Medal == "None", !is.na(Count))

summary <- MergeMedalCount %>% group_by(nickname) %>% summarize(gold = sum(Gold, na.rm = T), silver = sum(Silver, na.rm = T), bronze = sum(Bronze, na.rm = T), total = n())

data_matrix <- matrix(c(0, 5697, 4990, 4880, 106775,
                        1, 1219, 804, 722, 9644), ncol = 5, byrow = TRUE)

colnames(data_matrix) <- c("nickname", "gold", "silver", "bronze", "total")
rownames(data_matrix) <- c("1", "2")
```

Below is the code for data wrangling for the application
```{R echo= FALSE}
medalist <- olympics %>% na.omit()
```
> Describe any data cleaning and rearranging you needed to do to get your dataset into a workable form. Make sure to cite any packages which were important in your data cleaning process in this section. For instance, if you used dplyr, then it would be appropriate to say something like
>
> > we used the group-apply-combine paradigm with the `dplyr` functions `group_by` and `summarize` [@dplyr-package] to generate a dataset for each day of the observation period from the 15-minute interval observations in the raw data set.

## Topic of Exploration

#Here, you want to introduce the first topic you want to explore with your (newly cleaned up) data. Code to process data should be contained in chunks above this point, and those chunks should *not* be included in the report.

#below is the figure for conflict analysis

```{r, echo = FALSE}
#| echo: false
conflict = "Start of Iran and Iraq War,
                          Soviet-Afgan War,
                          Cold War tension"
nowinter = "No winter olympics. (1896-1923)"
splitup = "Summer and winter olympics split. (1993- current)"

ggplot(countries, aes(x=year, y=participantnum, fill = sex)) +
  geom_col() +
  scale_x_continuous(n.breaks = 60) +
  coord_cartesian(xlim = c(1895, 2017), expand = FALSE) +
  scale_y_continuous(n.breaks = 35, expand = c(0,0)) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust = 1)) +
  theme(legend.position = "bottom") +
  labs(title = "Influence of global conflict on the number of male and female olympic participants", x="Year of olympic games", y= "Total number of participants")+
   geom_rect(data=NULL,aes(xmin=1895,xmax=1923,ymin=-Inf,ymax=Inf),
            fill="lightgreen", alpha=0.01) +
  geom_rect(data=NULL,aes(xmin=1992,xmax=2017,ymin=-Inf,ymax=Inf),
            fill="lightblue", alpha=0.01)+
  theme(plot.title = element_text(size = 16, face= "bold", hjust = 0.5)) +
     geom_label(label = "World War 1", x=1916, y = 4700,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
      geom_segment(aes(x = 1916, y = 4350, xend = 1916, yend = 500),
                  arrow = arrow(length = unit(0.5, "cm")))+

     geom_label(label = "Great Depression", x=1932, y = 8000,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
    geom_segment(aes(x = 1932, y = 7650, xend = 1932, yend = 3500),
                  arrow = arrow(length = unit(0.5, "cm")))+

  geom_label(label = "World War 2", x=1942, y = 9000,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
     geom_segment(aes(x = 1942, y = 8650, xend = 1942, yend = 0),
                  arrow = arrow(length = unit(0.5, "cm")))+

     geom_label(label = "Suez Conflict", x=1956, y = 10000,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
    geom_segment(aes(x = 1956, y = 9650, xend = 1956, yend = 6500),
                  arrow = arrow(length = unit(0.5, "cm")))+
  geom_label(label = str_wrap(conflict,20), x=1980, y = 13000,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
   geom_segment(aes(x = 1980, y = 12000, xend = 1980, yend = 9500),
                  arrow = arrow(length = unit(0.5, "cm")))+

     geom_label(label = str_wrap(nowinter,20), x=1909, y = 15500,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
       geom_label(label = str_wrap(splitup,20), x=2006, y = 15500,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")

```

#below are figures for track over time

```{r, echo = FALSE}
track %>%
  ggplot(aes(x = year, y = reorder(event, year), color = category)) +
  geom_point(size = 3, na.rm = TRUE) +
  scale_color_manual(values = c("black", "red", "purple", "green", "blue")) +
  labs(title = "Participation in Track Events Over Time", x = "Year", y = "Event") +
  theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1, size = 22),
        axis.text.y = element_text(size = 16),
        axis.title = element_text(size=24),
        plot.title = element_text(size=28),
        legend.title = element_text(size=24),
        legend.text = element_text(size=16),
        legend.position = "right")

track %>% 
  group_by(id, year) %>% 
  summarize(count = n()) %>% 
  ggplot(aes(x = as.factor(year), y = count, fill = as.factor(year))) + 
  labs(title = "Multiple Event Participation", x = "Year", y = "Number of Events by Althlete") +
  geom_violin() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 22),
      axis.text.y = element_text(size = 16),
      axis.title = element_text(size=24),
      plot.title = element_text(size=24),
      legend.title = element_text(size=28),
      legend.text = element_text(size=16),
      legend.position="none")
```

#below are figures for nickname

```{r, echo = FALSE}
nickname$medal <- factor(nickname$medal, levels = c("gold", "silver", "bronze", "no_medal"))

p1 <- ggplot(nickname, aes(x = "", y = count)) +
  labs(title = "Athletes with Nicknames") +
  coord_polar("y", start = 0) +
  geom_bar(width = 1, stat = "identity", fill = c("gold", "#cd7f32", "#808080", "lightblue")) +
  theme(plot.title = element_text(size = 20),
        legend.position = 'none') +
  theme_void()

no_nickname$medal <- factor(no_nickname$medal, levels = c("gold", "silver", "bronze", "no_medal"))

p2 <- ggplot(no_nickname, aes(x = "", y = count)) +
  labs(title = "Athletes with Nicknames") +
  coord_polar("y", start = 0) +
  geom_bar(width = 1, stat = "identity", fill = c("gold", "#cd7f32", "#808080", "lightblue")) +
  theme(plot.title = element_text(size = 20),
        legend.position = 'none') +
  theme_void()

plot_grid(p1,p2, labels = c("",""))

# Perform the chi-square test
chi_square_result <- chisq.test(data_matrix)

# Print the result
print(chi_square_result)
```

#Below is the code for the app found under app.R followed by screenshots from the app demonstration. The goal of this app was to explore how our families "stacked up" to olympic counterparts of the same age and physical characteristics.
```{R echo=FALSE}
library(flexdashboard)
library(dplyr)
library(tibble)
library(shiny)
library(purrr)
library(DT)
library(shinydashboard)
library(rsconnect)
library(ggplot2)
library(shinythemes)
library(shinyWidgets)
library(shinydashboard)
library(shinydashboardPlus)



# start of application
#Get sidebar ready and tab names set fot the body.
sidebar <-  dashboardSidebar(
  width = 250,
  sidebarMenu(id = "tabs",
              menuItem("Dashboard",
                       tabName = "dashboard",
                       selected = TRUE,
                       startExpanded = TRUE,
                       menuItem("About us", tabName = "about"),
                       menuItem("Olympian's physical characteristics", tabName = "subitem1"),
                       menuItem(HTML("Help desk:<br/> imperial to metric conversion"),  tabName = "Imperial")

              )
  )
)

body <- dashboardBody(
  tabItems(
    #setting about us tab for fun!
    tabItem(tabName = "about",
            userBox(
              title = userDescription(
                title = "Addison Carroll",
                subtitle = "PhD Animal Science",
                type = 2,
                image = "https://lh3.googleusercontent.com/drive-viewer/AK7aPaBIIZV2XU74yuhj4R5lPX64CaCUVSttH8XY3ZrIJ0fqAhA5U7rre_nbHLA_xB_89CGqvb7LTTf_w71QerBAMYIinqaJWw=s1600?source=screenshot.guru",
              ),
              status = "primary",
              gradient = TRUE,
              background = "black",
              collapsible = FALSE,
              width = 6,
              boxToolSize = "xl",
              "Addison Carroll is a PhD with a focus in dairy cattle nutrition. SHe enjoys metalcore music,  her Aussie Bear, and exploring data for hidden relationships.",
              footer = NULL
            ),
            userBox(
              title = userDescription(
                title = "Sydney Graham",
                subtitle = "PhD Plant Breeding and Genetics",
                type = 2,
                image = "https://lh3.googleusercontent.com/drive-viewer/AK7aPaAPCKrWGfEz9fVP6iwkkrl6Lkb066jRR4UF4fRosVyGdnxSew6GQFdBpWPWyZ8e-dvaQACNiEK1b1PJmgclP_waJ54www=s1600?source=screenshot.guru",
              ),
              status = "primary",
              gradient = TRUE,
              background = "maroon",
              collapsible = FALSE,
              width = 6,
              boxToolSize = "xl",
              "Sydney Graham is a PhD in plant breeding and genetics. Outside of work she enjoys cooking, spending time with her family....",
              footer = NULL
            )),
    #setting second sub item which will be the main focus/game.
    tabItem(tabName = "subitem1",
            fluidPage(
              titlePanel(div("Influence of physical characteristics on medaling in Olympic games.. See how you stack up!",
                             style = "color: #000000")),
              fluidRow(
                #Age slider to explore the influence of age on medaling.
                #Slider is a red color
                column(12,
                       chooseSliderSkin("Shiny", color = "red"),
                       sliderInput("age",
                                   "Age range",
                                   min= min(medalist$age),
                                   max= max(medalist$age),
                                   value = c(min(medalist$age), max(medalist$age)),
                                   width = '100%'),
                       br()
                ),
                #Gender input with unique so values aren't repeated .
                #background red color and text white
                column(6,
                       wellPanel(style = "background-color: #960018; color: #FFFFFF;",
                                 selectInput("sex",
                                             "Gender:",
                                             c("All",
                                               unique(as.character(medalist$sex)))))
                ),
                #Season input with unique so values aren't repeated
                #background red color and text white
                column(6,
                       wellPanel(style = "background-color: #960018; color: #FFFFFF;",
                                 selectInput("season",
                                             "Summer or Winter season:",
                                             c("All",
                                               unique(as.character(medalist$season))))),
                       br()
                ),
                #weight picker with unique so values aren't repeated and sorted.
                #background red color and text white
                column(6,
                       wellPanel(style = "background-color: #960018; color: #FFFFFF;",
                                 pickerInput(inputId = "weight",
                                             label ="Weight (kg)",
                                             choices = c("All", unique(sort(medalist$weight)),
                                                         multiple = FALSE
                                             )))

                ),
                #height picker with unique so values aren't repeated and sorted.
                #background red color and text white
                column(6,
                       wellPanel(style = "background-color: #960018; color: #FFFFFF;",
                                 pickerInput(inputId = "height",
                                             label ="Height (cm)",
                                             choices = c("All", unique(sort(medalist$height))),
                                             multiple = FALSE
                                 )
                       )
                ),
                #giveing the tab a background color
                tags$style('.container-fluid { background-color: #FFFFFF;}'),
                tabsetPanel(tabPanel("outcome", DT::dataTableOutput("table")))
              )
            )
    ),
    #This is our tab to do imperial to metric conversions
    tabItem(tabName = "Imperial",
            h2("All data is in metric.. Here is the conversion for us dummies who don't use it!"),
            wellPanel(style = "background-color: grey;",
                      numericInput("myInput1", label = "Type in height in inches", value = 1),
                      uiOutput("ui1")),
            wellPanel(style ="background-color: #960018;",
                      numericInput("myInput2", label = "Type in weight in lbs", value = 1),
                      uiOutput("ui2"))
    )
  )
)

#Pulling together the dashboard with the sideboard and body.
ui <- dashboardPage(skin = "midnight",
                    dashboardHeader(title =  span(tagList(icon("earth-americas"), "olympics"))),
                    sidebar,
                    body
)


server <- function(input, output, session) {

  # Filter data based on selections
  output$table <- DT::renderDataTable(DT::datatable({
    data <- medalist[medalist$age >= input$age[1] & medalist$age <= input$age[2],]
    #now give the option to look at all or specific values
    if (input$sex != "All") {
      data <- data[data$sex == input$sex,]
    }
    if (input$season != "All") {
      data <- data[data$season == input$season,]
    }
    if (input$weight != "All") {
      data <- data[data$weight == input$weight,]
    }
    if (input$height != "All") {
      data <- data[data$height == input$height,]
    }
    data
  }) %>%
    #puts a background on the table so it isn't tansparent
    DT::formatStyle(colnames(data), target = 'cell', backgroundColor = 'white', opacity = 1)

  )

  #Inputs and output for height and weight calculations
  output$ui1 <- renderUI( {
    tagList(
      numericInput("obs1", "Height in cm", value = input$myInput1*2.54))
  })
  output$ui2 <- renderUI( {
    tagList(
      numericInput("obs1", "Weight in kg", value = input$myInput2*0.453592))
  })
  observe({print(input$tabs)})
}


# Run the application
shinyApp(ui, server)
```

#Here are the screenshots from the application demonstration.
Home page of this app
![](Appopeningpage.png)

Inital view of selection page
![](mainopeningpage.png)

Math for us dummies
![](Mathopening page.png)

These are the images from the shiny application output 
-   Richard (Addison's dad) is 6'3", weighs 250, and is 66 years young 

![](RCconversion.jpg) 

Unfortunately
-   Richard does not have any Olympic counterparts
 
![](RColympics.jpg) 

Let's look at Addison's sister Nicole
-   Nicole is 5'5, weighs around 155, and has told her sister she is 29 for the past 8 years
-   Lets look at that age range

![](NColympics.jpg) 

Obervations from application
-   At the age of 37 Nicole would have not have had a counter part 

However, within the range of 29 - 37 we have some! 
-   Gold medal cyclist from France 
-   Bronze medal handball player from the UK 
-   Gold medal Judo fighter from France 
-   Gold and silver medal Ice hockey player from Canada 
-   Bronze medal speed skater from China


If you generate a figure, it should have a caption. Here's a demonstration of how to do that:

```{r iris-plot}
#| label: fig-iris
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the relationship between sepal width and petal width in irises. I've used geom_jitter to combat overplotting, as the data are measured in relatively consistent increments. The figure is drawn with `ggplot2` [@ggplot2-package]."
#| echo: false


data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Width, y = Petal.Width, color = Species)) + 
  geom_jitter() + 
  xlab("Sepal Width (cm)") + ylab("Petal Width (cm)") + 
  ggtitle("Sepal and Petal Dimensions")
```

Then, you can reference @fig-iris in the text and the appropriate cross-reference will be generated.

You can find additional information about formatting figures generated from code in the [quarto documentation](https://quarto.org/docs/authoring/figures.html#computations).

## Topic of Exploration

Here, you want to introduce the first topic you want to explore with your (newly cleaned up) data. Code to process data should be contained in chunks above this point, and those chunks should *not* be included in the report.

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

If you generate a figure, it should have a caption. Here's a demonstration of how to do that:

```{r iris-plot}
#| label: fig-iris
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the relationship between sepal width and petal width in irises. I've used geom_jitter to combat overplotting, as the data are measured in relatively consistent increments. The figure is drawn with `ggplot2` [@ggplot2-package]."
#| echo: false


data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Width, y = Petal.Width, color = Species)) + 
  geom_jitter() + 
  xlab("Sepal Width (cm)") + ylab("Petal Width (cm)") + 
  ggtitle("Sepal and Petal Dimensions")
```

Then, you can reference @fig-iris in the text and the appropriate cross-reference will be generated.

You can find additional information about formatting figures generated from code in the [quarto documentation](https://quarto.org/docs/authoring/figures.html#computations).

## Additional Exploration topic

Add another topic here... as many as you desire, really. Make sure to include a transition between the two sections that connects the two with some sort of logical train of thought.

## Conclusion

Here, you want to summarize the main points of what you've learned from this investigation, in paragraph form.

## Tips

(delete this section from your report!)

Almost anything you might want to know about how to format output in quarto can be found [here](https://quarto.org/docs/authoring/markdown-basics.html). Feel free to email/come to office hours to figure out how to do XYZ - part of the goal of making you write this report is that I want you to know how to write e.g. a journal paper in Quarto as well, so now's the time to experiment.

If you want to know what the wordcount of your report is, you can run the following command in your terminal:

```         
pandoc --lua-filter wordcount.lua report.qmd
```

Notice that I have not pushed `_output/report.html` or the `_output/report_files/` folder to github - this is intentional. I have actually set `_output` to not show up in git, to encourage you all to NOT push the rendered files to github and to instead work from the markdown files directly.

You may find it cleaner to create a figure subdirectory and store any figures that aren't created by R/Python in that folder. I encourage you to organize this repository in a sensible way.
