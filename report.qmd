---
format: html
editor: visual
bibliography: references.bib
---

```{r, eval = T, echo=FALSE, message=FALSE, warning=FALSE}
# This code chunk contains code to install all of the dependencies
# necessary to compile and run your report, using if-statements to
# reduce install time for unnecessary code.
# It should be set to eval = F by default, so you aren't installing
# software on someone's computer without their consent.

# This works for packages that are on CRAN
if (!"tidyverse" %in% installed.packages()) {
  install.packages("tidyverse")
}
if (!"skimr" %in% installed.packages()) {
  install.packages("skimr")
}
if (!"cowplot" %in% installed.packages()) {
  install.packages("cowplot")
}

library(dplyr) #tidyverse
library(tidyr) #tidyverse
library(ggplot2) #tidyverse
library(stringr) #tidyverse
library(forcats) #tidyverse
library(skimr)
library(cowplot)
library(wordcloud) #cran
library(RColorBrewer)
library(flexdashboard)
library(tibble)
library(shiny)
library(purrr)
library(DT)
library(shinydashboard)
library(shinythemes)
library(shinyWidgets)
library(shinydashboardPlus)
library(bibtex)
toBibtex(citation("DT"))
knitr::write_bib(c("DT"), width = 60)

```

```{R echo=FALSE}
options(readr.show_col_types = FALSE)

olympics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-27/olympics.csv')
```

## Introduction

The Olympic Games is an international sports event that has been an icon through the ages. The games represent the best of the best in their given sports and are held every four years in front of a worldwide audience. However, the Olympics can sometimes feel out of touch to average athletic people. As a result, it was our goal to look at the games from a global perspective all the way down to a personal family level.

We obtained this data from a Tidy Tuesday dataset and it was originally scraped from www.sports-reference.com. The data set contains data from the Olympics from 1896 to 2016. Each athlete's name is listed and they have been assigned an individual ID. Physical characteristics are comprised of their sex, age, height, and weight. Team and National Olympic Committee Region (NOC) are used to denote which region the athlete represents. However, an observed anomoly was for each nation of interest there were multiple team names over the years and as a result NOC best represented each country of interest. In order to show this graphically we utilized `wordcloud` [@R-wordcloud] The dataset also contained information about the Olympic Games the athlete competed in, including the year, the season (summer or winter), and the city the games were held in. The sport and event were also included and, of course, which medal the athlete won (gold, silver, bronze), if an athlete did not medal the medal variable was given an NA. No event specific information was included (i.e. time or score).

## Visualization of the anomoly between 230 countries (NOC) vs 1184 teams (Team)
```{R, echo=FALSE, error=FALSE, warning=FALSE, message=FALSE, fig.height=9, fig.width=11}
#Add a visualization of the NOC vs country anomaly
countries1 <- olympics %>%
  group_by(noc) %>%
  summarise(participantnum1 = n(), .groups = "drop")
wordcloud(words = countries1$noc, 
          freq = countries1$participantnum1, 
          min.freq = 1, max.words=300,
          random.order=FALSE, 
          rot.per=0.35, 
          colors=brewer.pal(8, "Dark2"))

countries2 <- olympics %>%
  group_by(team) %>%
summarise(participantnum2 = n(), .groups = "drop")
wordcloud(words = countries2$team, 
          freq = countries2$participantnum2, 
          min.freq = 1, max.words=1154,
          random.order=FALSE, 
          rot.per=0.35, 
          colors=brewer.pal(8, "Dark2"))

```


Given this broad dataset and our goal to make the Olympic games to feel closer to home, our objectives were to 1) Evaluate the influence of historical events on the participation level of the games for both males and females, 2) Explore how participation in track events has changed over time, 3) Determine if the presence of a nickname influences a persons likelihood to medal, and 4) See how family physical characteristics stack up with Olympic medalists through the ages.

> Introduce your dataset and basic questions for exploration. Explain any unique approaches you will take or any interesting features of your dataset that you have to overcome. Cite the source of your dataset, and briefly discuss how it was collected.
>
> Discuss the variables in the dataset and if there are anomalies in the variables, provide some visual assessment of the anomalies and explain how they may have arisen. You should cover most of the information in your proposal data section, but should primarily use paragraphs and not lists/tables (the exception may be a list of e.g. items which were measured).

## Methods

The method of data wrangling for the conflict analysis was quite simple. I first utilized the initial data set of the Olympics, and preformed the the group-apply-combine paradigm with the `dplyr` [@R-dplyr]. We utilized the group_by function and grouped the data by noc, year, and sex. This was to develop the participants per country per year per sex. This value was summarized with the summarise function as participantnum .grops = drop within the summarise function is an override.

```{r, echo = FALSE}
# create data set that sums the countries by year.This only works for the years up until 1992 where games were held in the same year. 
countries <- olympics %>%
  group_by(noc,year,sex) %>%
  summarise(participantnum = n(), .groups = "drop")
```

Below is the code for data wrangling for track events over time

```{r, echo = FALSE}
#Get track and field events
t_f <- olympics %>% filter(sport == "Athletics")
#unique(t_f$event) #need to remove vaults, throws, puts, and athalons
track <- t_f %>% filter(!str_detect(event, "Walk|Jump|Put|Throw|Vault|Decathlon|Pentathlon|Heptathlon"))
track <- track %>% filter(!str_detect(event, "Around|Team")) #remove team events, and all-around champ
#unique(track$event)

#Add sub-categories, 60m - 400m sprint, 800m-3000m middle, 5000m-10000m + 5mile + marathon long
track$category <- NA
track$distance <- NA
for (i in 1:nrow(track)) {
  if(str_detect(track$event[i], "Relay")) {
    track$category[i] <- "relay"
  }
  if(str_detect(track$event[i], "Hurdle|Steeplechase")) {
    track$category[i] <- "hurdles"
  }
  if(str_detect(track$event[i], "Marathon|mile|Cross")) {
    track$category[i] <- "long"
  }
  else{
    distance <- str_extract(track$event[i], "\\d+(,\\d{3})*") #regex bad for relay but already categorized above
    track$distance[i] <- as.numeric(gsub(",", "", distance))
    if (is.na(track$category[i]) && !is.na(track$distance[i]) && track$distance[i] <= 400) {
      track$category[i] <- "sprint"
    }
    if (is.na(track$category[i]) && !is.na(track$distance[i]) && track$distance[i] > 400 && track$distance[i] <= 3000) {
      track$category[i] <- "middle"
    }
    if (is.na(track$category[i]) && !is.na(track$distance[i]) && track$distance[i] > 3000 && track$distance[i] <= 10000) {
      track$category[i] <- "long"
    }
  }
}

#skimr::skim(track)
```

Below is the code for data wrangling for nickname analysis

```{r, echo = FALSE}
olympics_nicknames <- olympics %>% mutate(nickname = as.integer(str_count(name, '"') == 2 | str_count(name, "'") == 2))
olympics_nicknames$nickname <- as.factor(olympics_nicknames$nickname)

olympics_nicknames %>% group_by(nickname) %>% summarize(count = n(), percent = n()/nrow(olympics_nicknames))

nickname <- olympics_nicknames %>% filter(nickname == 1) %>% group_by(medal) %>% summarize(count = n())
no_nickname <- olympics_nicknames %>% filter(nickname == 0) %>% group_by(medal) %>% summarize(count = n())

medalcount_nickname <- olympics_nicknames %>% filter(nickname == 1) %>% group_by(name) %>% summarize(Gold = sum(medal == "Gold"), Silver = sum(medal == "Silver"), Bronze = (sum(medal == "Bronze")), None = sum(is.na(medal)))

medalcount_no_nickname <- olympics_nicknames %>% filter(nickname == 0) %>% group_by(name) %>% summarize(Gold = sum(medal == "Gold"), Silver = sum(medal == "Silver"), Bronze = (sum(medal == "Bronze")), None = sum(is.na(medal)))

medalcount_nickname$nickname <- 1
medalcount_no_nickname$nickname <- 0

MergeMedalCount <- rbind(medalcount_nickname, medalcount_no_nickname)

MergeMedalCount_long_noNA <- MergeMedalCount %>% pivot_longer(cols = `Gold`:`None`, names_to = "Medal", values_to = "Count") %>% filter(!Medal == "None", !is.na(Count))

summary <- MergeMedalCount %>% group_by(nickname) %>% summarize(gold = sum(Gold, na.rm = T), silver = sum(Silver, na.rm = T), bronze = sum(Bronze, na.rm = T), total = n())

data_matrix <- matrix(c(0, 5697, 4990, 4880, 106775,
                        1, 1219, 804, 722, 9644), ncol = 5, byrow = TRUE)

colnames(data_matrix) <- c("nickname", "gold", "silver", "bronze", "total")
rownames(data_matrix) <- c("1", "2")
```

The data wrangling associated with the application was just to omit the nas within the entire data set utilizing the na.omit function from base R. This functioned because if a medalist did not get a medal the variable of medal was an na.

```{R, echo= FALSE}
medalist <- olympics %>% na.omit()
```

> Describe any data cleaning and rearranging you needed to do to get your dataset into a workable form. Make sure to cite any packages which were important in your data cleaning process in this section. For instance, if you used dplyr, then it would be appropriate to say something like
>
> > we used the group-apply-combine paradigm with the `dplyr` functions `group_by` and `summarize` [@dplyr-package] to generate a dataset for each day of the observation period from the 15-minute interval observations in the raw data set.

## Topic of Exploration

## Topic 1

The first topic of exploration was the influence of conflict on the particpation in the games. We also wanted to see if there was a difference in the number of participants between the different sexes if we did see a participation decrease. In order to graph this with the cleaned data, we utilized `ggplot` [@ggplot2-package]. We had the asthetics (aes) of year on the x axis, participantnum on the y axis and fill of the sex of the individuals. Then geom_col was utilized. Additions of scale_x_continuous and scale_y_continuous allowed for us to set the breaks to a meaningful level with n.breaks. Also coord_cartesian was used to set the x limits from 1895 to 2017. The theme was used for two aspects of this graph including axis.text.x which then allowed for us to angle the element_text to 90 degrees, to right justify (vjust) by 0.5 and left justify (hjust) by 1. Theme was also used to put the legend.position to the bottom. Labs was then utilized to create the title, and x and y axis titles.

After this point the goal was to evaluate the data. We first used geom_rect to visually parse out the areas before 1923 and after 1992 where either the winter games were not present or the Olympic summer and winter games were split into two different years. These were labeled using geom_label with a string wrap since the text was so long, the labels were set at specific x and y coordinates based on visual inspection. The labels were then padded so the wrapped lines were not right on top of one another, label size was set, font color set to black, and background fill was set to a green color.

After evaluating the data we picked out the bars where they were decreased relative to the surrounding bars or non-existent in the case of WW1 and WW2. We found a total of 6 global issues which caused decreases in the participation in the Olympic games including, WW1, The Great Depression, WW2, The Suez Conflict, and the beginning of the Iran and Iraq war/ Soviet-Afgan War / Cold War tension. We also noticed that for these conflicts the male participants dropped markedly relative to the female participants.

In order to place each of these conflicts on the graph geom_label was used again, and x and y coordinates were set based on the years associated with the conflict and visual inspection of the y axis. Label size was set to 0.55 like previous labels and colors for labels were the same as previous. An arrow was then added to point down to the specific year using geom_segment and the aesthetic for an arrow as set to the corresponding year on the x axis, and y value was adjusted to be a length where the end of the arrow touched the label and the bottom of the arrow was near the end of the specific bar (if there was a bar).

```{r, echo = FALSE, fig.height=7, fig.width=12}
conflict = "Start of Iran and Iraq War,
                          Soviet-Afgan War,
                          Cold War tension"
nowinter = "No winter olympics. (1896-1923)"
splitup = "Summer and winter olympics split. (1993- current)"

ggplot(countries, aes(x=year, y=participantnum, fill = sex)) +
  geom_col() +
  scale_x_continuous(n.breaks = 60) +
  coord_cartesian(xlim = c(1895, 2017), expand = FALSE) +
  scale_y_continuous(n.breaks = 35, expand = c(0,0)) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust = 1)) +
  theme(legend.position = "bottom") +
  labs(title = "Influence of global conflict on the number of male and female olympic participants", x="Year of olympic games", y= "Total number of participants")+
   geom_rect(data=NULL,aes(xmin=1895,xmax=1923,ymin=-Inf,ymax=Inf),
            fill="lightgreen", alpha=0.01) +
  geom_rect(data=NULL,aes(xmin=1992,xmax=2017,ymin=-Inf,ymax=Inf),
            fill="lightblue", alpha=0.01)+
  theme(plot.title = element_text(size = 16, face= "bold", hjust = 0.5)) +
     geom_label(label = "World War 1", x=1916, y = 4700,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
      geom_segment(aes(x = 1916, y = 4350, xend = 1916, yend = 500),
                  arrow = arrow(length = unit(0.5, "cm")))+

     geom_label(label = "Great Depression", x=1932, y = 8000,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
    geom_segment(aes(x = 1932, y = 7650, xend = 1932, yend = 3500),
                  arrow = arrow(length = unit(0.5, "cm")))+

  geom_label(label = "World War 2", x=1942, y = 9000,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
     geom_segment(aes(x = 1942, y = 8650, xend = 1942, yend = 0),
                  arrow = arrow(length = unit(0.5, "cm")))+

     geom_label(label = "Suez Conflict", x=1956, y = 10000,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
    geom_segment(aes(x = 1956, y = 9650, xend = 1956, yend = 6500),
                  arrow = arrow(length = unit(0.5, "cm")))+
  geom_label(label = str_wrap(conflict,20), x=1980, y = 13000,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
   geom_segment(aes(x = 1980, y = 12000, xend = 1980, yend = 9500),
                  arrow = arrow(length = unit(0.5, "cm")))+

     geom_label(label = str_wrap(nowinter,20), x=1909, y = 15500,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
       geom_label(label = str_wrap(splitup,20), x=2006, y = 15500,
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")

```

below are figures for track over time

```{r, echo = FALSE}
track %>%
  ggplot(aes(x = year, y = reorder(event, year), color = category)) +
  geom_point(size = 3, na.rm = TRUE) +
  scale_color_manual(values = c("black", "red", "purple", "green", "blue")) +
  labs(title = "Participation in Track Events Over Time", x = "Year", y = "Event") +
  theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1, size = 22),
        axis.text.y = element_text(size = 16),
        axis.title = element_text(size=24),
        plot.title = element_text(size=28),
        legend.title = element_text(size=24),
        legend.text = element_text(size=16),
        legend.position = "right")

track %>% 
  group_by(id, year) %>% 
  summarize(count = n()) %>% 
  ggplot(aes(x = as.factor(year), y = count, fill = as.factor(year))) + 
  labs(title = "Multiple Event Participation", x = "Year", y = "Number of Events by Althlete") +
  geom_violin() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 22),
      axis.text.y = element_text(size = 16),
      axis.title = element_text(size=24),
      plot.title = element_text(size=24),
      legend.title = element_text(size=28),
      legend.text = element_text(size=16),
      legend.position="none")
```

#below are figures for nickname

```{r, echo = FALSE}
nickname$medal <- factor(nickname$medal, levels = c("gold", "silver", "bronze", "no_medal"))

p1 <- ggplot(nickname, aes(x = "", y = count)) +
  labs(title = "Athletes with Nicknames") +
  coord_polar("y", start = 0) +
  geom_bar(width = 1, stat = "identity", fill = c("gold", "#cd7f32", "#808080", "lightblue")) +
  theme(plot.title = element_text(size = 20),
        legend.position = 'none') +
  theme_void()

no_nickname$medal <- factor(no_nickname$medal, levels = c("gold", "silver", "bronze", "no_medal"))

p2 <- ggplot(no_nickname, aes(x = "", y = count)) +
  labs(title = "Athletes with Nicknames") +
  coord_polar("y", start = 0) +
  geom_bar(width = 1, stat = "identity", fill = c("gold", "#cd7f32", "#808080", "lightblue")) +
  theme(plot.title = element_text(size = 20),
        legend.position = 'none') +
  theme_void()

plot_grid(p1,p2, labels = c("",""))

# Perform the chi-square test
chi_square_result <- chisq.test(data_matrix)

# Print the result
print(chi_square_result)
```


## Topic 4: The app

The app code is found under app.R. followed by the app link and screenshots from the app demonstration.

The goal of this app was to explore how our families "stacked up" to Olympic counterparts of the same age and physical characteristics. In order to accomplish this goal we utilized the `shinydashboard` [@R-shinydashboard]. First we utilized dashboardSidebar coupled with sidebarMenu in order to create the id of the "tabs" on the sidebar. Within this we also utilized menuItem to then define the tabName and that it would start expanded. Within the dashboard we then create 3 menu items including an "about us", "Olympian's physical characteristics", and a "Help desk: imperial to metric conversion."

Then we moved to the body. We started with the dashboardBody function and then set up our tab "guts" with the tabItemfunciton. Within the about us tab we utilized the userBox function from `shinydashboardPlus` [@R-shinydashboardPlus]. This allowed us to create a user description with title, subtitle, type of box, color of box, gradient effect on the box, status of the box relative to others, a little snippet of information about ourselves and an image of ourselves with the userDescription function. We then created the second tab using the tabItem function and linked it back to the sidebar menu item that was previously set up in the sidebar. We added the next tab item which would comprise our main page. In this tab item we utilized the fluidPage with a title and style of the title. After which this portion was set up with a fluidRow function. The first row covered the entire page as a slider with a shiny and red appearance from the chooseSliderSkin function. This was followed by a slider input of age which came from the cleaned dataset and the range of the slider was set to the minimum and maximum age in the data set.

The next box bellow in the Olympians physical characteristics tab was a set up with the wellPanel function for the season and sex variables. All wells took up half a page and the choices in this pannels where set by using the selectInput function followed by a unique function with as.character and the data set column of interest (ie. sex or season).In order to have the weights and heights the wellPanel function was used again. However instead of selectInput, pickerInput was utilized. The pickerInput allowed for an easier use of numerical values, and choices were created. The first choice was an "all" for all data and the second was created using the unique function, with the sort function so that numerical inputs were sorted. Multiple = FALSE was set as we didn't want people to choose multiple heights and weights. In retrospect this could have been a better option, and multiple choice could be added in the future. Interestingly at this point our background was transparent with a black background and black text so we set the background to white with tags\$style. TabsetPanel was coupled with tab panel to create an outcome table from the previous variables. We utilized the function dataTableOutput from the `DT` [@R-DT] to output the table based on the given factors in the well pannels and slider.

The final aspect of the body included the final tab item for the imperial to metric conversion. The wellPanel and numericInput functions were utilized. The numericInput was labeled and given an initial value of one. Each conversion (height and weight) included a different uiOutput so they could be used indpendently of eachother.

The UI was created by pulling the sidebar and body together. For aesthetics, a skin called "midnight" was added with the skin function in shinydashboardPlus. Also a header was added using the dashboardHeader function and a little globe was added to the header with the tagList and icon function.

The server was a function of input, output, and session.

The data table for the physical characteristics was created using renderDataTable and within that a datatable function. Within this function the first part was to filter data based on the lowest slider input and the highest slider input for age. After this if statements were used to say if the input was "all" then it would show all data, but if not then sex, weight, height and season were equal to the input from the UI. These things together would create the new output data table. At this point in time the data table remained transparent with black text on a black background. To solve this we utilized the function formatStyle from DT where the column names were all of those from the data, and the targets of this color was each cell. Inside formatStyle the backgroundColor function was utilized to set it to white, and the opacity function was set to 1 or 100% opaque so we could actually see the information from this table.

As previously stated each equation from the imperial to metric conversion had a UI output for each math calculation (height and weight) had a seperate ouput ui for a dynamically generated UI. We used renderUI coupled with tagList to print the final values created by the numericInput function. The numericInput function utilized the input values from the user and the conversion of height in inches to centimeters (multiply by 2.54) or the conversion of weight in lbs to kg (multiply by 0.453592).

Observe was then utilized so that the outputs were reactive to the inputs from each of the tabs and print the outcomes based on each specific set of criteria. Finally the shinyApp function was called with the inputs of server and ui to run the app.

[link to deployed shiny app](https://addisoncarroll.shinyapps.io/FamilyOlympics/)

Here are the screenshots from the application demonstration. Home page of this app ![opening](Appopeningpage.png)

Initial view of selection page ![Main page](mainopeningpage.png)

Math for us dummies ![Imperial to metric conversion](Mathopening%20page.png)

These are the images from the shiny application output - Richard (Addison's dad) is 6'3", weighs 250, and is 66 years young

![Richard's output](RCconversion.jpg)

Unfortunately - Richard does not have any Olympic counterparts

![Richard's output](RColympics.jpg)

Let's look at Addison's sister Nicole - Nicole is 5'5, weighs around 155, and has told her sister she is 29 for the past 8 years - Lets look at that age range

![Nicole's output](NColympics.jpg)

Observations from application - At the age of 37 Nicole would have not have had a counter part

However, within the range of 29 - 37 we have some! - Gold medal cyclist from France - Bronze medal handball player from the UK - Gold medal Judo fighter from France - Gold and silver medal Ice hockey player from Canada - Bronze medal speed skater from China



You can find additional information about formatting figures generated from code in the [quarto documentation](https://quarto.org/docs/authoring/figures.html#computations).

## Topic of Exploration

Here, you want to introduce the first topic you want to explore with your (newly cleaned up) data. Code to process data should be contained in chunks above this point, and those chunks should *not* be included in the report.

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

If you generate a figure, it should have a caption. Here's a demonstration of how to do that:

```{r iris-plot}
#| label: fig-iris
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the relationship between sepal width and petal width in irises. I've used geom_jitter to combat overplotting, as the data are measured in relatively consistent increments. The figure is drawn with `ggplot2` [@ggplot2-package]."
#| echo: false


data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Width, y = Petal.Width, color = Species)) + 
  geom_jitter() + 
  xlab("Sepal Width (cm)") + ylab("Petal Width (cm)") + 
  ggtitle("Sepal and Petal Dimensions")
```

Then, you can reference @fig-iris in the text and the appropriate cross-reference will be generated.

You can find additional information about formatting figures generated from code in the [quarto documentation](https://quarto.org/docs/authoring/figures.html#computations).

## Additional Exploration topic

Add another topic here... as many as you desire, really. Make sure to include a transition between the two sections that connects the two with some sort of logical train of thought.

## Conclusion

Utilizing data from the Olympics we were able to explore various factors from a global level to that of our own family. In analysis 1 we observed that global conflict had a marked influence on Olympic game participation, particularly for males through out history.

analysis2

analysis3

Finally in part 4 where we developed an app. We observed within the application we are limited in our age range up to 66 years, and it is likely that these older ages are less likely to a Olympic counterpart. Therefore, Richard is out of the running Also, it may be better to utilize an age range rather than just a single age. This is because if if Nicole's age was set there would be no counterpart. However, when we add a range and her physical characteristics we can observe counterparts.

## Tips

(delete this section from your report!)

Almost anything you might want to know about how to format output in quarto can be found [here](https://quarto.org/docs/authoring/markdown-basics.html). Feel free to email/come to office hours to figure out how to do XYZ - part of the goal of making you write this report is that I want you to know how to write e.g. a journal paper in Quarto as well, so now's the time to experiment.

If you want to know what the wordcount of your report is, you can run the following command in your terminal:

```         
pandoc --lua-filter wordcount.lua report.qmd
```

Notice that I have not pushed `_output/report.html` or the `_output/report_files/` folder to github - this is intentional. I have actually set `_output` to not show up in git, to encourage you all to NOT push the rendered files to github and to instead work from the markdown files directly.

You may find it cleaner to create a figure subdirectory and store any figures that aren't created by R/Python in that folder. I encourage you to organize this repository in a sensible way.
