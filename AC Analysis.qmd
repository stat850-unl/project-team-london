---
title: "Participation & global conflict"
format: html
editor: visual
---

```{R}
install.packages("tidytuesdayR")

tuesdata <- tidytuesdayR::tt_load('2021-07-27')
tuesdata <- tidytuesdayR::tt_load(2021, week = 31)

olympics <- tuesdata$olympics

olympics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-27/olympics.csv')
```

## Data wrangling analysis 1 - AC

```{r}
#So the winter and summer were held in the same year up until 1992. 
#In editing phase I'd like to
#We are going to look at the data from 1896 - 1992. first we filter
library(dplyr)
library(ggplot2)
library(stringr)
subolympics <- olympics %>% filter(year < 1994)
# create data set that sums the countries by year. 
countries <- subolympics %>%
  group_by(noc,year,season) %>%
  summarise(participantnum = n(), .groups = "drop")

```

## Data wrangling analysis 2 - AC

```{r}
## Analysis 2 - AC: Shiny app: Input your age, weight, height and gender. Spits out who medaled in what sport with those characteristics.
#essentially we need to omit anyone with out the data we need. 
medalist <- olympics %>% na.omit()



```

#Analysis \## Analysis 1 - AC: How does global conflict influence the number of nations who participate in the Olympics?

```{r fig.align="center", echo=FALSE, fig.width=14}
#split the data into two frames summer and winter
conflict = "Start of Iran and Iraq War, 
                          Soviet-Afgan War, 
                          Cold War tension"

ggplot(countries, aes(x=year, y=participantnum, fill = season)) +
  geom_col() +
  scale_x_continuous(n.breaks = 49) +
  scale_y_continuous(n.breaks = 35, expand = c(0,0)) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust = 1))+
  theme(legend.position = "bottom") +
  labs(title = "Influence of global conflict on the number of olympic participants", x="Year of olympic games", y= "Total number of participants")+
  theme(plot.title = element_text(size = 16, face= "bold", hjust = 0.5)) +
     geom_label(label = "World War 1", x=1916, y = 4700, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
      geom_segment(aes(x = 1916, y = 4350, xend = 1916, yend = 500),
                  arrow = arrow(length = unit(0.5, "cm")))+

     geom_label(label = "Great Depression", x=1932, y = 8000, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
    geom_segment(aes(x = 1932, y = 7650, xend = 1932, yend = 3500),
                  arrow = arrow(length = unit(0.5, "cm")))+
  
  geom_label(label = "World War 2", x=1942, y = 8000, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
     geom_segment(aes(x = 1942, y = 7650, xend = 1942, yend = 0),
                  arrow = arrow(length = unit(0.5, "cm")))+
  
     geom_label(label = "Suez Conflict", x=1956, y = 10000, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
    geom_segment(aes(x = 1956, y = 9650, xend = 1956, yend = 6500),
                  arrow = arrow(length = unit(0.5, "cm")))+
  

     geom_label(label = str_wrap(conflict,20), x=1980, y = 13000, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
   geom_segment(aes(x = 1980, y = 12000, xend = 1980, yend = 9500),
                  arrow = arrow(length = unit(0.5, "cm")))
  


```

## Analysis 2 - AC: How does body weight make a difference in the ability of an athlete to medal in a sport?

```{r}
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
runtime: shiny
```

```{r setup, include=FALSE}
library(flexdashboard)
```

Column {data-width=1000}

```{r}

library(dplyr)
library(tibble)
library(shiny)
library(purrr)
library(DT)
library(shinydashboard)
library(rsconnect)
library(ggplot2)

#Need gender option
#Need weight option
#need height option
#need age option
#output which events they could medal in


# Define UI
#ui <- fluidPage(

#Navbar structure for UI
  #navbarPage("Options for best sport based on height, weight, age and gender", theme = shinytheme("lumen"),
            # tabPanel("Sport Finder", fluid = TRUE, icon = icon("globe-americas"),
                    #  tags$style(button_color_css),
                      # Sidebar layout with a input and output definitions
                    #  sidebarLayout(
                     #   sidebarPanel(

                     #     titlePanel("Characteristics of athelete"),
                       #   fluidRow(column(3,

                 # Select which Gender(s) to plot
                          #  checkboxGroupInput(inputId = "Sex",
                                            #  label = "Select Gender(s):",
                                             #   choices = c("Male" = "M", "Female" = "F"),
                                                #             selected = "M"),

                                    
                # Set Age Range
                    #      fluidRow(column(5,
                                      #    textInput(inputId = "Agemin",
                                           #         label = "From:",
                                            #        value = "10",
                                             #       width = "100px")
                        #  ),
                          #column(5, ofset = 3,
                           #      textInput(inputId = "AgeMax",
                                     #      label = "To:",
                                      #     value = "96",
                                       #    width = "100px")
                        #  )),
                         # actionButton(inputId = "Age", label = "Age"),
                        # hr(),
                      
                  # Set Height Range
                         # fluidRow(column(5,
                                        #  textInput(inputId = "Heightmin",
                                             #       label = "From:",
                                             #       value = "127",
                                              #      width = "100px")
                         # ),
                        #  column(5, ofset = 3,
                            #     textInput(inputId = "HeightMax",
                                 #          label = "To:",
                                #           value = "226",
                                  #         width = "100px")
                      #    )),
                         # actionButton(inputId = "Height (cm)", label = "Height (cm)"),
                      
                # Set weight Range
                          #fluidRow(column(5,
                                        #  textInput(inputId = "Weightmin",
                                          #          label = "From:",
                                              #      value = "25",
                                              #      width = "100px")
                      #    ),
                        #  column(5, ofset = 3,
                       #          textInput(inputId = "WeightMax",
                         #                  label = "To:",
                          #                 value = "215",
                           #                width = "100px")
                        #  )),
                       #   actionButton(inputId = "Weight (kg)", label = "Weight (kg)"),
                
           #     DT::dataTableOutput("table")
             #             )
              #            )))
          #   )))
             


library(ggplot2)

ui <- fluidPage(
  titlePanel("Basic DataTable"),

  # Create a new Row in the UI for selectInputs
  fluidRow(
    column(4,
        selectInput("sex",
                    "Gender:",
                    c("All",
                      unique(as.character(medalist$sex))))
    ),
    column(4,
        selectInput("age",
                    "Age",
                    c("All",
                      unique(as.character(medalist$age))))
    ),
      column(4,
        selectInput("weight",
                    "Weight (kg)",
                    c("All",
                      unique(as.character(medalist$weight))))
    ),
    column(4,
        selectInput("height",
                    "Height (cm):",
                    c("All",
                      unique(as.character(medalist$height))))
    )
  ),
  # Create a new row for the table.
  DT::dataTableOutput("table")
)

server <- function(input, output) {

  # Filter data based on selections
  output$table <- DT::renderDataTable(DT::datatable({
    data <- medalist
    if (input$sex != "All") {
      data <- data[data$sex == input$sex,]
    }
    if (input$age != "All") {
      data <- data[data$age == input$age,]
    }
    if (input$weight != "All") {
      data <- data[data$weight == input$weight,]
    }
    if (input$height != "All") {
      data <- data[data$height == input$height,]
    }
    data
  }))

}
# Run the application
shinyApp(ui = ui, server = server)
```

#Conclusions
