---
format: revealjs
---

## Quarto

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

## Bullets

When you click the **Render** button a document will be generated that includes:

-   Content authored with markdown
-   Output from executable code

## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

# Introduction

# Data Wrangling

## Import data

```{R, show_col_types = FALSE}
#install.packages("tidytuesdayR")

# Read in with tidytuesdayR package 
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest

show_col_t
# Either ISO-8601 date or year/week works!

tuesdata <- tidytuesdayR::tt_load('2021-07-27')
tuesdata <- tidytuesdayR::tt_load(2021, week = 31)

olympics <- tuesdata$olympics

# Or read in the data manually

olympics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-27/olympics.csv')
```

##Data set description This dataset contains information about the winter and summer Olympic athletes from the years 1896 to 2016, their team, weight, placing, sport, event, age, height.

It was collected from Tidy Tuesday where the data was scraped from www.sports-reference.com.

Here is a data dictionary showing each variable, the type of variable, units, and range of values that are possible:

+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| Name    | Description                       | Type      | Units   | Range/Values                                            |
+=========+===================================+===========+=========+=========================================================+
| id      | Athlete ID                        | numeric   | NA      | 1 - 135571                                              |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| name    | Athlete Name                      | character | NA      | Name and surname(s) (ex. Lawal Kolawole "Kola" Abdulai) |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| sex     | Athlete Sex                       | character | NA      | F or M                                                  |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| age     | Athlete Age                       | numeric   | years   | 10 - 97                                                 |
|         |                                   |           |         |                                                         |
|         |                                   |           |         | NA if unknown                                           |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| height  | Athlete Height                    | numeric   | cm      | 127 - 226                                               |
|         |                                   |           |         |                                                         |
|         |                                   |           |         | NA if unknown                                           |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| weight  | Athlete weight                    | numeric   | kg      | 25 - 214                                                |
|         |                                   |           |         |                                                         |
|         |                                   |           |         | NA if unknown                                           |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| team    | Country/Team competing for        | character | NA      | country name (ex. Canada)                               |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| noc     | National Olympic Committee region | character | NA      | 3 letter code of NOC (ex. CAN)                          |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| games   | Olympic games name                | character | NA      | Year and season (ex. 2000 Summer)                       |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| year    | Year of Olympics                  | numeric   | YYYY    | 1896 - 2016                                             |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| season  | Season                            | character | NA      | winter or summer                                        |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| city    | City of Olympic host              | character | NA      | City name (ex. Atlanta)                                 |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| sport   | Sport                             | character | NA      | Sport title (ex. Rowing)                                |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| event   | Specific event                    | character | NA      | Specific event title (ex. Rowing Men's Coxed Eights)    |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+
| medal   | Medal won (if any)                | character | NA      | (Gold, Silver, Bronze or NA)                            |
+---------+-----------------------------------+-----------+---------+---------------------------------------------------------+

Below is the data for the supplementary data in the regions dataframe

+----------+----------------------------+-----------+----------+----------------------------------------+
| Name     | Description                | Type      | Units    | Range/Values                           |
+==========+============================+===========+==========+========================================+
| NOC      | National Olympic Committee | character | NA       | 3 letter code of NOC (ex. CAN)         |
+----------+----------------------------+-----------+----------+----------------------------------------+
| region   | Region associated with NOC | character | NA       | Region name (ex. Canada)               |
+----------+----------------------------+-----------+----------+----------------------------------------+
| notes    | Comments & alternate names | character | NA       | NA or alternate name (ex. Australasia) |
+----------+----------------------------+-----------+----------+----------------------------------------+

## Analyzing the influence of global conflict on male and female participation in the olympic games

```{r echo=FALSE}
library(dplyr)
# create data set that sums the countries by year.This only works for the years up until 1992 where games were held in the same year. 
summary(olympics)
countries <- olympics %>%
  group_by(noc,year,sex) %>%
  summarise(participantnum = n(), .groups = "drop")
```

```{R fig.align="center", echo=FALSE, fig.width=14}
conflict = "Start of Iran and Iraq War, 
                          Soviet-Afgan War, 
                          Cold War tension"
nowinter = "No winter olympics. (1896-1923)"
splitup = "Summer and winter olympics split. (1993- current)"

ggplot(countries, aes(x=year, y=participantnum, fill = sex)) +
  geom_col() + 
  scale_x_continuous(n.breaks = 60) +
  coord_cartesian(xlim = c(1895, 2017), expand = FALSE) +
  scale_y_continuous(n.breaks = 35, expand = c(0,0)) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust = 1))+
  theme(legend.position = "bottom") +
  labs(title = "Influence of global conflict on the number of male and female olympic participants", x="Year of olympic games", y= "Total number of participants")+
   geom_rect(data=NULL,aes(xmin=1895,xmax=1923,ymin=-Inf,ymax=Inf),
            fill="lightgreen", alpha=0.01) +
  geom_rect(data=NULL,aes(xmin=1992,xmax=2017,ymin=-Inf,ymax=Inf),
            fill="lightblue", alpha=0.01)+
  theme(plot.title = element_text(size = 16, face= "bold", hjust = 0.5)) +
     geom_label(label = "World War 1", x=1916, y = 4700, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
      geom_segment(aes(x = 1916, y = 4350, xend = 1916, yend = 500),
                  arrow = arrow(length = unit(0.5, "cm")))+

     geom_label(label = "Great Depression", x=1932, y = 8000, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
    geom_segment(aes(x = 1932, y = 7650, xend = 1932, yend = 3500),
                  arrow = arrow(length = unit(0.5, "cm")))+
  
  geom_label(label = "World War 2", x=1942, y = 9000, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
     geom_segment(aes(x = 1942, y = 8650, xend = 1942, yend = 0),
                  arrow = arrow(length = unit(0.5, "cm")))+
  
     geom_label(label = "Suez Conflict", x=1956, y = 10000, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")+
    geom_segment(aes(x = 1956, y = 9650, xend = 1956, yend = 6500),
                  arrow = arrow(length = unit(0.5, "cm")))+
  geom_label(label = str_wrap(conflict,20), x=1980, y = 13000, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") +
   geom_segment(aes(x = 1980, y = 12000, xend = 1980, yend = 9500),
                  arrow = arrow(length = unit(0.5, "cm")))+

     geom_label(label = str_wrap(nowinter,20), x=1909, y = 15500, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2") + 
       geom_label(label = str_wrap(splitup,20), x=2006, y = 15500, 
             label.padding = unit(0.55, "lines"),
             label.size = 0.35,
             color = "black",
             fill = "#69b3a2")

```
## Shiny application. The goal of this application is to have fun using family members physical characteristics and compare them relative to olympic athletes who have metaled.

```{r echo=FALSE}
#Analysis 2 - AC: Shiny app: Input your age, weight, height and gender. Spits out who medaled in what sport with those characteristics.
#essentially we need to omit anyone who hasn't medaled. 
medalist <- olympics %>% na.omit()
```

```{r picture, echo=F, outwidth='100%'}
library(flexdashboard)
library(dplyr)
library(tibble)
library(shiny)
library(purrr)
library(DT)
library(shinydashboard)
library(rsconnect)
library(ggplot2)
library(shinythemes)
library(shinyWidgets)
library(shinydashboard)
library(shinydashboardPlus)



# start of application
#Get sidebar ready and tab names set fot the body.
sidebar <-  dashboardSidebar(
      width = 250,
      sidebarMenu(id = "tabs", 
       menuItem("Dashboard",
                tabName = "dashboard", 
                selected = TRUE, 
                startExpanded = TRUE,
       menuItem("About us", tabName = "about"),
       menuItem("Olympian's physical characteristics", tabName = "subitem1"),
       menuItem(HTML("Help desk:<br/> imperial to metric conversion"),  tabName = "Imperial")
       
  )
)
)
  
 body <- dashboardBody(
  tabItems(
    #setting about us tab for fun!
  tabItem(tabName = "about",
          userBox(
          title = userDescription(
          title = "Addison Carroll",
          subtitle = "PhD Animal Science",
          type = 2,
          image = "https://lh3.googleusercontent.com/drive-viewer/AK7aPaBIIZV2XU74yuhj4R5lPX64CaCUVSttH8XY3ZrIJ0fqAhA5U7rre_nbHLA_xB_89CGqvb7LTTf_w71QerBAMYIinqaJWw=s1600?source=screenshot.guru",
        ),
        status = "primary",
        gradient = TRUE,
        background = "black",
        collapsible = FALSE,
        width = 6,
        boxToolSize = "xl",
        "Hi! I'm Addison a PhD with a focus in dairy cattle nutrition. I enjoy metalcore music,  my Aussie Bear, and exploring data for hidden relationships.",
        footer = NULL
        ),
         userBox(
          title = userDescription(
          title = "Sydney Graham",
          subtitle = "PhD Plant Breeding and Genetics",
          type = 2,
          image = "https://lh3.googleusercontent.com/drive-viewer/AK7aPaAPCKrWGfEz9fVP6iwkkrl6Lkb066jRR4UF4fRosVyGdnxSew6GQFdBpWPWyZ8e-dvaQACNiEK1b1PJmgclP_waJ54www=s1600?source=screenshot.guru",
        ),
        status = "primary",
        gradient = TRUE,
        background = "maroon",
        collapsible = FALSE,
        width = 6,
        boxToolSize = "xl",
        "Some text here!",
        footer = NULL
      )),
  #setting second sub item which will be the main focus/game.
 tabItem(tabName = "subitem1", 
    fluidPage(
      titlePanel(div("Influence of physical characteristics on medaling in Olympic games.. See how you stack up!",
                 style = "color: #000000")),
       fluidRow(
      #Age slider to explore the influence of age on medaling.
      #Slider is a red color 
            column(12,
        chooseSliderSkin("Shiny", color = "red"),
          sliderInput("age",
                    "Age range", 
                    min= min(medalist$age),
                    max= max(medalist$age), 
                    value = c(min(medalist$age), max(medalist$age)),
                    width = '100%'),
                    br()
    ),
      #Gender input with unique so values aren't repeated .
      #background red color and text white  
        column(6,
        wellPanel(style = "background-color: #960018; color: #FFFFFF;",
        selectInput("sex",
                    "Gender:",
                    c("All",
                      unique(as.character(medalist$sex)))))
        ),
      #Season input with unique so values aren't repeated 
      #background red color and text white
         column(6,
          wellPanel(style = "background-color: #960018; color: #FFFFFF;",
          selectInput("season",
                    "Summer or Winter season:",
                    c("All",
                      unique(as.character(medalist$season))))),
                       br()
      ),
    #weight picker with unique so values aren't repeated and sorted.
    #background red color and text white
      column(6,
        wellPanel(style = "background-color: #960018; color: #FFFFFF;",
        pickerInput(inputId = "weight",
                    label ="Weight (kg)",
                    choices = c("All", unique(sort(medalist$weight)),
                    multiple = FALSE
        )))

     ),
    #height picker with unique so values aren't repeated and sorted.
    #background red color and text white
      column(6,
             wellPanel(style = "background-color: #960018; color: #FFFFFF;",
             pickerInput(inputId = "height",
                    label ="Height (cm)",
                    choices = c("All", unique(sort(medalist$height))),
                    multiple = FALSE
         )
        )
    ),
    #giveing the tab a background color
    tags$style('.container-fluid { background-color: #FFFFFF;}'),
     tabsetPanel(tabPanel("outcome", DT::dataTableOutput("table")))
       )
    )
       ),
 #This is our tab to do imperial to metric conversions   
  tabItem(tabName = "Imperial",
        h2("All data is in metric.. Here is the conversion for us dummies who don't use it!"),
            wellPanel(style = "background-color: grey;",
                      numericInput("myInput1", label = "Type in height in inches", value = 1),
                       uiOutput("ui1")),
             wellPanel(style ="background-color: #960018;",
                       numericInput("myInput2", label = "Type in weight in lbs", value = 1),
                       uiOutput("ui2"))
)
)
)

#Pulling together the dashboard with the sideboard and body.
ui <- dashboardPage(skin = "midnight", 
  dashboardHeader(title =  span(tagList(icon("earth-americas"), "olympics"))),
  sidebar,
  body
)


server <- function(input, output, session) {

  # Filter data based on selections
  output$table <- DT::renderDataTable(DT::datatable({
    data <- medalist[medalist$age >= input$age[1] & medalist$age <= input$age[2],]
  #now give the option to look at all or specific values
    if (input$sex != "All") {
      data <- data[data$sex == input$sex,]
    }
    if (input$season != "All") {
      data <- data[data$season == input$season,]
    }
    if (input$weight != "All") {
      data <- data[data$weight == input$weight,]
    }
    if (input$height != "All") {
      data <- data[data$height == input$height,]
    }
    data 
  }) %>%
    #puts a background on the table so it isn't tansparent
      DT::formatStyle(colnames(data), target = 'cell', backgroundColor = 'white', opacity = 1) 
  
  ) 
 
  #Inputs and output for height and weight calculations
  output$ui1 <- renderUI( {
    tagList(
      numericInput("obs1", "Height in cm", value = input$myInput1*2.54))
  })
    output$ui2 <- renderUI( {
    tagList(
      numericInput("obs1", "Weight in kg", value = input$myInput2*0.453592))
    })
    observe({print(input$tabs)})
}


# Run the application
shinyApp(ui, server)
```
```

## Data wrangling analysis 3 -SG

```{r}
#Are athletes with nicknames more likely to medal in Olympic events?

library(stringr)

summary(olympics)

#Need to consider the most robust way to filter for nicknames
sub_nickname <- olympics %>% filter(str_detect(name, '"'))
sub_nickname_2 <- olympics %>% filter(str_count(name, '"') == 2 | str_count(name, "'") == 2)

list1 <- unique(sub_nickname$name)
list2 <- unique(sub_nickname_2$name)

difference <- list1[!list1 %in% list2]
difference

#Going with the OR filter
sub_nickname <- sub_nickname_2

olympics_nicknames <- olympics %>% mutate(nickname = as.integer(str_count(name, '"') == 2 | str_count(name, "'") == 2))

```

## Data wrangling analysis 4 - SG

```{r}
# How has participation in track events changed over time? Are athletes competing in fewer events more recently? Has the length of their Olympic careers changed?


```


## Analysis 3 -SG

```{r}
1 + 1
```

## Analysis 4 - SG

```{r}
1 + 1
```

#Conclusions
